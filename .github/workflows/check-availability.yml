// スクリプトの先頭に以下を追加
process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"

const axios = require("axios")
const { Client } = require("@line/bot-sdk")

// LINE Messaging APIの設定
const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || "",
}

// LINEクライアントの初期化
const client = new Client(lineConfig)

// LINE通知を送信する関数
async function sendLineNotification(message) {
  try {
    // 環境変数からユーザーIDを取得
    const userId = process.env.LINE_USER_ID

    if (!userId) {
      console.error("LINE_USER_ID is not set")
      return false
    }

    // LINEメッセージを送信
    await client.pushMessage(userId, {
      type: "text",
      text: message,
    })

    console.log("LINE notification sent successfully")
    return true
  } catch (error) {
    console.error("Error sending LINE notification:", error)
    return false
  }
}

// キャンプ場の空き状況をチェックする関数（cheerioを使わないバージョン）
async function checkCampingAvailability(date) {
  try {
    console.log(`Checking availability for ${date}`)

    // 孫太郎オートキャンプ場の予約ページURL
    const reservePageUrl =
      process.env.NEXT_PUBLIC_CAMPING_URL ||
      "https://asp.hotel-story.ne.jp/ver3d/di/?hcod1=08300&hcod2=001&seek=on&def=seek"

    console.log(`Accessing reserve page: ${reservePageUrl}`)

    // ユーザーエージェントを設定してブラウザのように見せる
    const response = await axios.get(reservePageUrl, {
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        Accept: "text/html,application/xhtml+xml,application/xml",
        "Accept-Language": "ja,en-US;q=0.9,en;q=0.8",
      },
    })

    const html = response.data
    console.log("Response received, analyzing HTML...")

    // 日付文字列を整形（例: 2025-07-26 → 2025年7月26日）
    const dateParts = date.split("-")
    const formattedDate = `${dateParts[0]}年${parseInt(dateParts[1])}月${parseInt(dateParts[2])}日`
    console.log(`Looking for date: ${formattedDate}`)

    // 正規表現を使用して日付を含む部分を探す
    const dateRegex = new RegExp(formattedDate, "g")
    const matches = html.match(dateRegex)
    
    console.log(`Found ${matches ? matches.length : 0} occurrences of the date`)

    // 「空き」「予約可能」などのテキストを探す
    const availabilityKeywords = ["空き", "予約可能", "○"]
    const unavailabilityKeywords = ["×", "満室", "予約不可"]
    
    // HTMLに日付が含まれていて、かつ空き状況を示すキーワードが含まれている場合
    let availabilityFound = false
    
    if (matches && matches.length > 0) {
      // 日付の前後500文字を抽出して分析
      for (const match of matches) {
        const matchIndex = html.indexOf(match)
        const start = Math.max(0, matchIndex - 500)
        const end = Math.min(html.length, matchIndex + 500)
        const context = html.substring(start, end)
        
        console.log(`Analyzing context around date: ${context.substring(0, 100)}...`)
        
        // 空き状況を示すキーワードがあるか確認
        const hasAvailabilityKeyword = availabilityKeywords.some(keyword => context.includes(keyword))
        const hasUnavailabilityKeyword = unavailabilityKeywords.some(keyword => context.includes(keyword))
        
        if (hasAvailabilityKeyword && !hasUnavailabilityKeyword) {
          availabilityFound = true
          console.log(`Availability found near date occurrence`)
          break
        }
      }
    }

    // 結果を返す
    return {
      isAvailable: availabilityFound,
      date,
      url: reservePageUrl,
    }
  } catch (error) {
    console.error("Error checking camping availability:", error)
    return {
      isAvailable: false,
      error: "チェック中にエラーが発生しました",
      date,
      url:
        process.env.NEXT_PUBLIC_CAMPING_URL ||
        "https://asp.hotel-story.ne.jp/ver3d/di/?hcod1=08300&hcod2=001&seek=on&def=seek",
    }
  }
}

// メイン処理
async function main() {
  try {
    // 環境変数から情報を取得
    const checkDate = process.env.NEXT_PUBLIC_CHECK_DATE || "2025-07-26"

    console.log(`Starting availability check for date: ${checkDate}`)
    console.log(`Current time: ${new Date().toISOString()}`)

    // 実際にキャンプ場の空き状況をチェック
    const result = await checkCampingAvailability(checkDate)

    // 空きがあった場合、LINE通知を送信
    if (result.isAvailable) {
      const message = `🏕️ ${checkDate}の孫太郎オートキャンプ場に空きが出ました！
今すぐ予約しましょう！
予約ページ: ${result.url}`
      await sendLineNotification(message)
      console.log("空きが見つかりました！通知を送信しました。")
    } else {
      console.log("空きはありませんでした。")
    }

    console.log("Availability check completed")
  } catch (error) {
    console.error("Error in main process:", error)
    // メイン処理でエラーが発生した場合も